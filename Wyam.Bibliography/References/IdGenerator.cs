using System.Diagnostics.Contracts;
using System.Text;
using System.Text.RegularExpressions;
using JetBrains.Annotations;

namespace Wyam.Bibliography.References
{
    /// <summary>
    ///     If user provided id is not valid
    /// </summary>
    internal class IdGenerator
    {
        private readonly IdValidator _idValidator;

        public IdGenerator(IdValidator idValidator)
        {
            _idValidator = idValidator;
        }

        public string GetId([CanBeNull] string userProvidedId, [CanBeNull] PersonName author, int? year,
            [CanBeNull] string title)
        {
            if (_idValidator.IsValid(userProvidedId))
                return userProvidedId;

            // user didn't provide a valid id, so it should be autogenerated
            var autoGeneratedId = GenerateId(author, year, title);
            Contract.Assert(_idValidator.IsValid(autoGeneratedId));

            return autoGeneratedId;
        }

        private string GenerateId([CanBeNull] PersonName author, int? year, [CanBeNull] string title)
        {
            var generatedId = "";
            if (author != null)
                if (author.LastName != null)
                    generatedId += ToAscii(author.LastName).ToLowerInvariant();
                else if (author.UnprocessedAuthorString != null)
                    generatedId += ToAscii(author.UnprocessedAuthorString).ToLowerInvariant();
            if (string.IsNullOrEmpty(generatedId))
                generatedId += "reference";
            generatedId += "_";
            generatedId += year?.ToString() ?? "year_unknown";
            if (!string.IsNullOrEmpty(title))
                generatedId += "_" + ToAscii(title).ToLowerInvariant();
            generatedId = Regex.Replace(generatedId, @"\s+", "_");

            return generatedId;
        }

        private static string ToAscii([NotNull] string s)
        {
            // replace diacritics (like ó, ł, ń) with close ascii characters (o, l, n)
            var asciiEquivalents = Encoding.ASCII.GetString(Encoding.GetEncoding("Cyrillic").GetBytes(s));

            // only leave valid alphanumeric characters
            asciiEquivalents = Regex.Replace(asciiEquivalents, @"[^\w\d_]+", string.Empty);

            return asciiEquivalents;
        }
    }
}