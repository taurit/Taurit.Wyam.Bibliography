using System;
using System.Diagnostics.Contracts;
using System.Text;
using JetBrains.Annotations;

namespace Wyam.Bibliography.References
{
    /// <summary>
    ///     If user provided id is not valid
    /// </summary>
    internal class IdGenerator
    {
        private readonly IdValidator _idValidator;

        public IdGenerator(IdValidator idValidator)
        {
            _idValidator = idValidator;
        }

        public string GetId([CanBeNull]string userProvidedId, [CanBeNull]PersonName author, int? year)
        {
            if (_idValidator.IsValid(userProvidedId))
                return userProvidedId;

            // user didn't provide a valid id, so it should be autogenerated
            var autoGeneratedId = GenerateId(author, year);
            Contract.Assert(_idValidator.IsValid(autoGeneratedId));

            return autoGeneratedId;
        }

        private string GenerateId([CanBeNull]PersonName author, int? year)
        {
            string generatedId = "";
            if (author != null)
            {
                if (author.LastName != null)
                {
                    generatedId += RemoveDiacritics(author.LastName).ToLowerInvariant();
                } else if (author.UnprocessedAuthorString != null)
                {
                    generatedId += RemoveDiacritics(author.UnprocessedAuthorString).ToLowerInvariant();
                }
            }
            if (String.IsNullOrEmpty(generatedId))
                generatedId += "reference";
            generatedId += "_";
            generatedId += year?.ToString() ?? "year_unknown";

            return generatedId;
        }

        private static string RemoveDiacritics([NotNull]string s)
        {
            string asciiEquivalents = Encoding.ASCII.GetString(Encoding.GetEncoding("Cyrillic").GetBytes(s));
            return asciiEquivalents;
        }
    }
}